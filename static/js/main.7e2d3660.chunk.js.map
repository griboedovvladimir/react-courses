{"version":3,"sources":["CONSTANTS.ts","actions/actions.ts","app/buttons.ts","app/App.tsx","serviceWorker.ts","reducers/reducers.ts","index.tsx"],"names":["ADD_CHAR","REMEMBER_NUMBER_AND_OPERATION","CLEAR","CLEAR_CURRENT_NUMBER","CLEAR_MEMORY","addChar","char","type","CONSTANTS","remember","number","operation","clear","clearCurrentNumber","reset","buttons","symbol","App","clickHandler","e","target","_this","props","calculator","currentNumberString","length","id","buttonsHandler","result","A","this","memory","B","Number","rememberedOperation","actions","action","calculate","toString","slice","button","currentNumber","rememberedNumber","buttonIsOperation","operationInit","map","btn","i","react_default","a","createElement","key","className","onClick","Component","connect","state","dispatch","bindActionCreators","Object","objectSpread","Boolean","window","location","hostname","match","InitialState","arguments","undefined","newState","reducer","combineReducers","reducers","store","createStore","devToolsEnhancer","name","ReactDOM","render","es","src_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e2d3660.chunk.js","sourcesContent":["export const ADD_CHAR = 'ADD_CHAR';\r\nexport const REMEMBER_NUMBER_AND_OPERATION = 'REMEMBER_NUMBER_AND_OPERATION';\r\nexport const CLEAR = 'CLEAR';\r\nexport const CLEAR_CURRENT_NUMBER = 'CLEAR_CURRENT_NUMBER';\r\nexport const CLEAR_MEMORY = 'CLEAR_MEMORY';","import * as CONSTANTS from '../CONSTANTS';\r\n\r\nexport function addChar(char: string) {\r\n    return {\r\n        type: CONSTANTS.ADD_CHAR,\r\n        char\r\n    };\r\n}\r\n\r\nexport function remember(number: number, operation: string) {\r\n    return {\r\n        type: CONSTANTS.REMEMBER_NUMBER_AND_OPERATION,\r\n        number, operation\r\n    };\r\n}\r\n\r\nexport function clear() {\r\n    return {\r\n        type: CONSTANTS.CLEAR,\r\n    };\r\n}\r\n\r\nexport function clearCurrentNumber() {\r\n    return {\r\n        type: CONSTANTS.CLEAR_CURRENT_NUMBER,\r\n    };\r\n}\r\n\r\nexport function reset() {\r\n    return {\r\n        type: CONSTANTS.CLEAR_MEMORY,\r\n    };\r\n}","export const buttons = [\r\n    {symbol: '1', operation: ''},\r\n    {symbol: '2', operation: ''},\r\n    {symbol: '3', operation: ''},\r\n    {symbol: '+', operation: 'sum'},\r\n    {symbol: '4', operation: ''},\r\n    {symbol: '5', operation: ''},\r\n    {symbol: '6', operation: ''},\r\n    {symbol: '-', operation: 'subtract'},\r\n    {symbol: '7', operation: ''},\r\n    {symbol: '8', operation: ''},\r\n    {symbol: '9', operation: ''},\r\n    {symbol: '*', operation: 'multiply'},\r\n    {symbol: 'C', operation: 'clear'},\r\n    {symbol: '0', operation: ''},\r\n    {symbol: '=', operation: 'equal'},\r\n    {symbol: '/', operation: 'division'},\r\n];","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {bindActionCreators, Dispatch} from \"redux\";\r\nimport * as actions from '../actions/actions'\r\nimport {connect} from 'react-redux';\r\nimport {buttons} from './buttons'\r\n\r\ninterface IAppProps {\r\n    calculator: {\r\n        currentNumberString: string;\r\n        memory: number;\r\n        operation: string;\r\n    },\r\n    action:{\r\n        clear:()=> void;\r\n        addChar:(char:string|number)=> void;\r\n        clearCurrentNumber: ()=>void;\r\n        remember:(number: number, operation: string)=>void;\r\n        reset: () => void\r\n    }\r\n}\r\n\r\nclass App extends Component <IAppProps, {}> {\r\n    public buttons = buttons;\r\n\r\n    calculate(operation: string): number {\r\n        const A = this.props.calculator.memory;\r\n        const B = Number(this.props.calculator.currentNumberString);\r\n        let result: number;\r\n        switch (operation) {\r\n            case 'sum':\r\n                result = A + B;\r\n                break;\r\n            case 'subtract':\r\n                result = A - B;\r\n                break;\r\n            case 'multiply':\r\n                result = A * B;\r\n                break;\r\n            case 'division':\r\n                result = A / B;\r\n                break;\r\n            default:\r\n                result = 0;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    operationInit(): void {\r\n        const rememberedOperation = this.props.calculator.operation;\r\n        const actions = this.props.action;\r\n        actions.clear();\r\n        this.calculate(rememberedOperation).toString().length > 13\r\n            ? actions.addChar(this.calculate(rememberedOperation).toString().slice(0, 12))\r\n            : actions.addChar(this.calculate(rememberedOperation));\r\n    }\r\n\r\n    buttonsHandler(button: any): void {\r\n        const operation = this.buttons[button.id].operation;\r\n        const currentNumber = Number(this.props.calculator.currentNumberString);\r\n        const symbol = this.buttons[button.id].symbol;\r\n        const rememberedNumber = this.props.calculator.memory;\r\n        const rememberedOperation = this.props.calculator.operation;\r\n        const actions = this.props.action;\r\n        const buttonIsOperation = (operation !== 'equal') && (operation !== 'clear');\r\n\r\n        if (!operation && currentNumber === 0) {\r\n            actions.clearCurrentNumber();\r\n            actions.addChar(symbol);\r\n        }\r\n        if (!operation && currentNumber !== 0) {\r\n            actions.addChar(symbol);\r\n        }\r\n        if (operation && buttonIsOperation && operation === rememberedOperation) {\r\n            this.operationInit();\r\n        }\r\n        if (operation && buttonIsOperation) {\r\n            actions.remember(currentNumber, operation)\r\n        }\r\n        if (operation === 'clear') {\r\n            actions.reset();\r\n        }\r\n        if (operation === 'equal' && currentNumber !== 0 && rememberedOperation) {\r\n            this.operationInit()\r\n        }\r\n        if (!operation && rememberedOperation && currentNumber === rememberedNumber) {\r\n            actions.clearCurrentNumber();\r\n            actions.addChar(symbol);\r\n        }\r\n    }\r\n\r\n\r\n    clickHandler = (e: any) => {\r\n        if (e.target && e.target.type === 'button' &&\r\n            (this.props.calculator.currentNumberString.length + 1 < 14 || this.buttons[e.target.id].symbol === 'C')) {\r\n            this.buttonsHandler(e.target);\r\n        }\r\n    };\r\n\r\n    public render(): React.ReactNode {\r\n        let buttons = this.buttons.map((btn, i) => <button type=\"button\" id={i.toString()}\r\n                                                           key={i}>{btn.symbol}</button>);\r\n        return (\r\n            <div className=\"calculator\">\r\n                <div className=\"screen\">{this.props.calculator.currentNumberString}</div>\r\n                <div className=\"buttons\" onClick={this.clickHandler}>\r\n                    {buttons}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: IAppProps) => state;\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    action: bindActionCreators({...actions}, dispatch)\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as CONSTANTS from '../CONSTANTS';\r\n\r\nconst InitialState = {\r\n    currentNumberString: '0',\r\n    memory: 0,\r\n    operation: '',\r\n};\r\n\r\ninterface IActions {\r\n    type: string;\r\n    number?: number;\r\n    char?: string;\r\n    operation: string;\r\n}\r\n\r\ninterface IState {\r\n    currentNumberString: string;\r\n    memory: number | undefined;\r\n    operation: string;\r\n}\r\n\r\nexport function calculator(state: IState = InitialState, action: IActions): IState {\r\n    let newState = state;\r\n    switch (action.type) {\r\n        case CONSTANTS.ADD_CHAR:\r\n            newState = {\r\n                ...state, currentNumberString: state.currentNumberString + action.char\r\n            };\r\n            break;\r\n        case CONSTANTS.REMEMBER_NUMBER_AND_OPERATION:\r\n            newState = {\r\n                ...state, memory: action.number, operation: action.operation\r\n            };\r\n            break;\r\n        case CONSTANTS.CLEAR_CURRENT_NUMBER:\r\n            newState = {\r\n                ...state, currentNumberString: ''\r\n            };\r\n            break;\r\n        case CONSTANTS.CLEAR:\r\n            newState = {\r\n                currentNumberString: '',\r\n                memory: 0,\r\n                operation: '',\r\n            };\r\n            break;\r\n        case CONSTANTS.CLEAR_MEMORY:\r\n            newState = {\r\n                currentNumberString: '0',\r\n                memory: 0,\r\n                operation: '',\r\n            };\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {combineReducers,createStore } from 'redux'\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\nimport {Provider} from 'react-redux';\r\nimport * as reducers from './reducers/reducers';\r\n\r\nconst reducer = combineReducers(reducers);\r\nconst store = createStore(reducer, /* preloadedState, */ devToolsEnhancer({name:'calculator'}));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}