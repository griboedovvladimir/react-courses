{"version":3,"sources":["services/store.service.ts","components/BrandChoice/BrandChoice.tsx","components/Button/Button.tsx","data/data.ts","components/ModelChoice/ModelChoice.tsx","components/FuelChoice/FuelChoice.tsx","components/TransmissionChoice/TransmissionChoice.tsx","components/Summary/Summary.tsx","components/Wizard/Wizard.tsx","serviceWorker.ts","index.tsx"],"names":["instance","StoreService","Object","classCallCheck","this","choice","objectSpread","BrandChoice","storeService","selectedBrand","_this","getStore","brand","addToStore","e","target","value","focusEventHandler","props","changeEnabled","options","keys","renderData","map","i","react_default","a","createElement","key","id","onFocus","htmlFor","name","defaultValue","onChange","Component","Button","onClick","clickCallback","disabled","type","destiny","data","Opel","Citroen","Ford","fuel","transmission","ModelChoice","selectedModel","model","FuelChoice","selectedFuel","TransmissionChoice","selectedTransmission","Summary","list","el","Wizard","state","currentStep","doNextStep","setState","doBackStep","enableNextButton","activeStep","components_BrandChoice_BrandChoice","components_ModelChoice_ModelChoice","components_FuelChoice_FuelChoice","components_TransmissionChoice_TransmissionChoice","components_Summary_Summary","className","initStep","components_Button_Button","Boolean","window","location","hostname","match","ReactDOM","render","components_Wizard_Wizard","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec5b5796.chunk.js","sourcesContent":["import {IChoice} from \"../interfaces/interfaces\";\r\n\r\nlet instance: any = null;\r\n\r\nexport default class StoreService {\r\n    public choice: any;\r\n\r\n    constructor() {\r\n        if (!instance) {\r\n            instance = this;\r\n        }\r\n\r\n        return instance;\r\n    }\r\n\r\n\r\n    public addToStore(choice: any): void {\r\n        this.choice = {...this.choice, ...choice};\r\n    }\r\n\r\n    public getStore(): IChoice {\r\n        return this.choice;\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './BrandChoice.css';\r\nimport StoreService from '../../services/store.service';\r\nimport {IStepsProps} from '../../interfaces/interfaces';\r\n\r\nclass BrandChoice extends Component <IStepsProps,{}> {\r\n    private storeService = new StoreService();\r\n    private selectedBrand = this.storeService.getStore() ? this.storeService.getStore().brand : '';\r\n\r\n    private addToStore = (e: React.ChangeEvent<HTMLSelectElement> | React.FocusEvent<HTMLFormElement>): void => {\r\n        this.storeService.addToStore({brand: e.target.value});\r\n    };\r\n\r\n    private focusEventHandler = (e: React.FocusEvent<HTMLFormElement>) => {\r\n        this.addToStore(e);\r\n        this.props.changeEnabled();\r\n    };\r\n\r\n    public render(): React.ReactNode {\r\n        let options = Object.keys(this.props.renderData).map((brand, i) => <option key={i}>{brand}</option>);\r\n        return (\r\n            <form id=\"form\" onFocus={this.focusEventHandler}>\r\n                <label htmlFor=\"brand\">Choice brand</label>\r\n                <select id=\"brand\" name=\"brand\" defaultValue={this.selectedBrand} onChange={this.addToStore}>\r\n                    ${options}\r\n                </select>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BrandChoice;","import React, {FC} from 'react';\r\nimport './Button.css'\r\n\r\ninterface IButtonProps {\r\n    destiny: string,\r\n    clickCallback: () => void;\r\n    disabled: boolean;\r\n}\r\n\r\nconst Button: FC<IButtonProps> = (props)=> {\r\n        return (\r\n            <button onClick={props.clickCallback} disabled={props.disabled}\r\n                    type=\"button\">{props.destiny}</button>\r\n        )\r\n\r\n};\r\n\r\nexport default Button;","export const data = {\r\n    brand: {\r\n        Opel: [\"Astra\", \"Vectra\", \"Zafira\"],\r\n        Citroen: [\"Xsara\", \"Xantia\", \"C5\", \"Berlingo\"],\r\n        Ford: [\"Focus\",\"Fiesta\"],\r\n    },\r\n    fuel:[\"Petrol\", \"Diesel\"],\r\n    transmission: [\"Automatic\", \"Manual\"]\r\n};","import React, {Component} from 'react';\r\nimport StoreService from \"../../services/store.service\";\r\nimport {IStepsProps} from '../../interfaces/interfaces';\r\n\r\nclass ModelChoice extends Component <IStepsProps, {}> {\r\n    private storeService = new StoreService();\r\n    private selectedModel = this.storeService.getStore() ? this.storeService.getStore().model : '';\r\n\r\n    public componentDidMount(): void {\r\n        if (this.selectedModel) {\r\n            this.props.changeEnabled();\r\n        }\r\n    }\r\n\r\n    private addToStore = (e: React.ChangeEvent<HTMLSelectElement> | React.FocusEvent<HTMLFormElement>): void => {\r\n        this.storeService.addToStore({model: e.target.value});\r\n    };\r\n\r\n    private focusEventHandler = (e: React.FocusEvent<HTMLFormElement>): void => {\r\n        this.addToStore(e);\r\n        this.props.changeEnabled();\r\n    };\r\n\r\n    public render(): React.ReactNode {\r\n        let options = this.props.renderData.map((model: string, i: number): React.ReactNode => <option\r\n            key={i}>{model}</option>);\r\n        return (\r\n            <form id=\"form\" onFocus={this.focusEventHandler}>\r\n                <label htmlFor=\"model\">Choice model</label>\r\n                <select id=\"model\" name=\"model\" defaultValue={this.selectedModel} onChange={this.addToStore}>\r\n                    ${options}\r\n                </select>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ModelChoice;","import React, {Component} from 'react';\r\nimport StoreService from '../../services/store.service';\r\nimport {IStepsProps} from '../../interfaces/interfaces';\r\n\r\nclass FuelChoice extends Component <IStepsProps, {}>{\r\n    private storeService = new StoreService();\r\n    private  selectedFuel = this.storeService.getStore() ? this.storeService.getStore().fuel : '';\r\n\r\n    public componentDidMount() {\r\n        if (this.selectedFuel) {\r\n            this.props.changeEnabled();\r\n        }\r\n    }\r\n\r\n    private addToStore = (e: React.ChangeEvent<HTMLSelectElement> | React.FocusEvent<HTMLFormElement>) => {\r\n        this.storeService.addToStore({fuel: e.target.value});\r\n    };\r\n\r\n    private focusEventHandler = (e: React.FocusEvent<HTMLFormElement>) => {\r\n        this.addToStore(e);\r\n        this.props.changeEnabled();\r\n    };\r\n\r\n    public render(): React.ReactNode {\r\n        let options = this.props.renderData.map((fuel: string, i: number) => <option key={i}>{fuel}</option>);\r\n        return (\r\n            <form id=\"form\" onFocus={this.focusEventHandler}>\r\n                <label htmlFor=\"fuel\">Choice fuel</label>\r\n                <select id=\"fuel\" name=\"fuel\" defaultValue={this.selectedFuel} onChange={this.addToStore}>\r\n                    ${options}\r\n                </select>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FuelChoice;","import React, {Component} from 'react';\r\nimport StoreService from \"../../services/store.service\";\r\nimport {IStepsProps} from '../../interfaces/interfaces';\r\n\r\nclass TransmissionChoice extends Component <IStepsProps, {}> {\r\n    private storeService = new StoreService();\r\n    private selectedTransmission = this.storeService.getStore() ? this.storeService.getStore().transmission : '';\r\n\r\n    public componentDidMount(): void {\r\n        if (this.selectedTransmission) {\r\n            this.props.changeEnabled();\r\n        }\r\n    }\r\n\r\n    private addToStore = (e: React.ChangeEvent<HTMLSelectElement> | React.FocusEvent<HTMLFormElement>) => {\r\n        this.storeService.addToStore({transmission: e.target.value});\r\n    };\r\n\r\n    private focusEventHandler = (e: React.FocusEvent<HTMLFormElement>) => {\r\n        this.addToStore(e);\r\n        this.props.changeEnabled();\r\n    };\r\n\r\n    public render(): React.ReactNode {\r\n        let options = this.props.renderData.map((model: string, i: number) => <option key={i}>{model}</option>);\r\n        return (\r\n            <form id=\"transmission\" onFocus={this.focusEventHandler}>\r\n                <label htmlFor=\"transmission\">Choice transmission</label>\r\n                <select name=\"transmission\" id=\"transmission\" defaultValue={this.selectedTransmission}\r\n                        onChange={this.addToStore}>\r\n                    ${options}\r\n                </select>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TransmissionChoice;","import React, {FC} from 'react';\r\nimport StoreService from \"../../services/store.service\";\r\nimport './Summary.css';\r\n\r\n\r\nconst Summary:FC = () => {\r\n    const storeService = new StoreService();\r\n        let list = Object.keys(storeService.getStore()).map((el, i) => <li\r\n            key={i}><span>{el}</span> : {storeService.getStore()[el]}</li>);\r\n        return (\r\n            <div id=\"form\">\r\n                <h2>Your choice:</h2>\r\n                <ul>\r\n                    {list}\r\n                </ul>\r\n            </div>\r\n        )\r\n};\r\n\r\nexport default Summary;","import React, {Component} from 'react';\nimport './Wizard.css';\nimport BrandChoice from '../BrandChoice';\nimport Button from '../Button';\nimport {data} from '../../data/data';\nimport ModelChoice from '../ModelChoice';\nimport FuelChoice from '../FuelChoice';\nimport TransmissionChoice from '../TransmissionChoice';\nimport Summary from '../Summary';\nimport StoreService from '../../services/store.service'\nimport { IData } from '../../interfaces/interfaces'\n\ninterface IWizardState {\n    currentStep: string;\n    disabled: boolean\n}\n\nclass Wizard extends Component < {}, IWizardState>{\n    private data: IData = data;\n    private storeService = new StoreService();\n    public state = {\n        currentStep: 'brand',\n        disabled: true\n    };\n\n    private doNextStep = () => {\n        this.setState({disabled: true});\n        if (this.state.currentStep === 'brand') {\n            this.setState({currentStep: 'model'});\n        } else if (this.state.currentStep === 'model') {\n            this.setState({currentStep: 'fuel'});\n        } else if (this.state.currentStep === 'fuel') {\n            this.setState({currentStep: 'transmission'});\n        } else if (this.state.currentStep === 'transmission') {\n            this.setState({currentStep: 'summary'});\n        }\n    };\n\n    private doBackStep = () => {\n        this.setState({disabled: false});\n        if (this.state.currentStep === 'summary') {\n            this.setState({currentStep: 'transmission'});\n        } else if (this.state.currentStep === 'transmission') {\n            this.setState({currentStep: 'fuel'});\n        } else if (this.state.currentStep === 'fuel') {\n            this.setState({currentStep: 'model'});\n        } else if (this.state.currentStep === 'model') {\n            this.setState({currentStep: 'brand'});\n        }\n    };\n\n    private initStep(name: string): React.ReactNode {\n        let activeStep;\n        switch (name) {\n            case 'brand':\n                activeStep = <BrandChoice changeEnabled={this.enableNextButton} renderData={this.data.brand}/>;\n                break;\n            case 'model':\n                activeStep = <ModelChoice changeEnabled={this.enableNextButton}\n                                          renderData={this.data.brand[this.storeService.getStore().brand]}/>;\n                break;\n            case 'fuel':\n                activeStep = <FuelChoice changeEnabled={this.enableNextButton} renderData={this.data.fuel}/>;\n                break;\n            case 'transmission':\n                activeStep = <TransmissionChoice changeEnabled={this.enableNextButton}\n                                                 renderData={this.data.transmission}/>;\n                break;\n            case 'summary':\n                activeStep = <Summary/>;\n                break;\n            default:\n                activeStep = null;\n        }\n        return activeStep;\n    }\n\n    private enableNextButton = () => {\n        this.setState({disabled: false});\n    };\n\n    public render(): React.ReactNode {\n        return (\n            <div className=\"wizard\">\n                {this.initStep(this.state.currentStep)}\n                <div className=\"buttons\">\n                    {this.state.currentStep !== 'brand' &&\n                    <Button disabled={false} clickCallback={this.doBackStep} destiny=\"Back\"/>}\n                    {this.state.currentStep !== 'summary' &&\n                    <Button disabled={this.state.disabled} clickCallback={this.doNextStep} destiny=\"Next\"/>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Wizard;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Wizard is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Wizard from './components/Wizard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Wizard />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}